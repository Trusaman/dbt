<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AugmentWebviewStateStore">
    <option name="stateMap">
      <map>
        <entry key="CHAT_STATE" value="{"currentConversationId":"827734c8-c1e0-4afe-9f3c-b55a5d42e5f9","conversations":{"13388108-7f75-4c0f-ae01-fd6ab2c15f89":{"id":"13388108-7f75-4c0f-ae01-fd6ab2c15f89","createdAtIso":"2025-05-11T13:51:22.404Z","lastInteractedAtIso":"2025-05-11T13:51:22.404Z","chatHistory":[],"feedbackStates":{},"toolUseStates":{},"draftExchange":{"request_message":"","rich_text_json_repr":{"type":"doc","content":[{"type":"paragraph"}]},"status":"draft"},"requestIds":[],"isPinned":false,"isShareable":false,"extraData":{"hasDirtyEdits":false},"personaType":0},"d8ceba66-974e-4086-9c3a-5a402033b065":{"id":"d8ceba66-974e-4086-9c3a-5a402033b065","createdAtIso":"2025-05-11T13:51:22.534Z","lastInteractedAtIso":"2025-05-11T13:51:22.534Z","chatHistory":[],"feedbackStates":{},"toolUseStates":{},"draftExchange":{"request_message":"","rich_text_json_repr":{"type":"doc","content":[{"type":"paragraph"}]},"status":"draft"},"requestIds":[],"isPinned":false,"isShareable":false,"extraData":{"hasDirtyEdits":false},"personaType":0},"827734c8-c1e0-4afe-9f3c-b55a5d42e5f9":{"id":"827734c8-c1e0-4afe-9f3c-b55a5d42e5f9","name":"Welcome to the Augment Agent","createdAtIso":"2025-05-11T13:51:26.451Z","lastInteractedAtIso":"2025-05-11T14:45:27.659Z","chatHistory":[{"request_id":"60b74bb8-02a4-4eb1-b2c3-d7cb81608099","uuid":"3d5fc627-9d7f-4b97-9e3e-1e7c47e51704","chatItemType":"agentic-checkpoint-delimiter","status":"success","fromTimestamp":0,"toTimestamp":1746971486452,"seen_state":"seen"},{"status":"success","request_id":"0d0a5538-bcfe-49ce-b374-710ed8686457","request_message":"generate profile big query template yml","rich_text_json_repr":{"type":"doc","content":[{"type":"paragraph","content":[{"type":"text","text":"generate profile big query template yml"}]}]},"mentioned_items":[],"structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_012YM1wiTHTvHe9i9tpN2q5a","tool_name":"codebase-retrieval","input_json":"{\"information_request\": \"Find the dbt_project.yml file and any existing profiles.yml or profile configuration files in the project\"}","mcp_server_name":"","mcp_tool_name":""}},{"id":0,"type":0,"content":"I'll help you generate a BigQuery profile template for dbt. Let me first gather some information about the current project structure to ensure the template is compatible with your setup.\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":0,"text_node":{"content":"generate profile big query template yml"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"C:/Users/ADMIN/DataspellProjects/test_dbt","folderRoot":"C:/Users/ADMIN/DataspellProjects/test_dbt"}],"workspaceFoldersUnchanged":false}}],"timestamp":"2025-05-11T14:33:13.799Z","response_text":"I'll help you generate a BigQuery profile template for dbt. Let me first gather some information about the current project structure to ensure the template is compatible with your setup.\n","workspace_file_chunks":[]},{"status":"success","request_id":"02d0c964-90b5-4b90-8908-2cee8f439898","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01TXkP2EPZzshtzedRzbZ3BP","tool_name":"save-file","input_json":"{\"file_path\": \"profiles.yml\", \"file_content\": \"test_dbt:\\n  target: dev\\n  outputs:\\n    dev:\\n      type: bigquery\\n      method: service-account\\n      project: my-test-project-dbt  # Your GCP project ID\\n      dataset: dbt_dev              # The dataset where dbt will build models\\n      threads: 4                    # Number of concurrent operations\\n      timeout_seconds: 300          # Query timeout in seconds\\n      location: US                  # BigQuery dataset location\\n      priority: interactive         # Job execution priority\\n      \\n      # Choose ONE of the following authentication methods:\\n      \\n      # Option 1: Using a service account JSON keyfile\\n      keyfile: /path/to/my-test-project-dbt-94d70c036c98.json  # Full path to your service account JSON file\\n      \\n      # Option 2: Using impersonation (if configured)\\n      # impersonate_service_account: service-account-name@project-id.iam.gserviceaccount.com\\n      \\n    prod:\\n      type: bigquery\\n      method: service-account\\n      project: my-test-project-dbt  # Your GCP project ID\\n      dataset: dbt_prod             # Production dataset\\n      threads: 4\\n      timeout_seconds: 300\\n      location: US\\n      priority: interactive\\n      keyfile: /path/to/my-test-project-dbt-94d70c036c98.json  # Full path to your service account JSON file\"}","mcp_server_name":"","mcp_tool_name":""}},{"id":0,"type":0,"content":"I can see your dbt project is set up with the name 'test_dbt' and I've found a BigQuery service account JSON file. Now I'll create a profiles.yml template for BigQuery that you can use with your project.\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"The following code sections were retrieved:\nPath: dbt_project.yml\n\n# Name your project! Project names should contain only lowercase characters\n# and underscores. A good package name should reflect your organization's\n# name or the intended use of these models\nname: 'test_dbt'\nversion: '1.0.0'\n\n# This setting configures which \"profile\" dbt uses for this project.\nprofile: 'test_dbt'\n\n# These configurations specify where dbt should look for different types of files.\n# The `model-paths` config, for example, states that models in this project can be\n# found in the \"models/\" directory. You probably won't need to change these!\nmodel-paths: [\"models\"]\nanalysis-paths: [\"analyses\"]\ntest-paths: [\"tests\"]\nseed-paths: [\"seeds\"]\nmacro-paths: [\"macros\"]\nsnapshot-paths: [\"snapshots\"]\n\nclean-targets:         # directories to be removed by `dbt clean`\n  - \"target\"\n  - \"dbt_packages\"\n\n\n# Configuring models\n# Full documentation: https://docs.getdbt.com/docs/configuring-models\n\n# In this example config, we tell dbt to build all models in the example/\n# directory as views. These settings can be overridden in the individual model\n# files using the `{{ config(...) }}` macro.\nmodels:\n  test_dbt:\n    # Config indicated by + and applies to all files under models/example/\n    example:\n      +materialized: view\n...\nPath: analyses/my-test-project-dbt-94d70c036c98.json\n{\n  \"type\": \"service_account\",\n  \"project_id\": \"my-test-project-dbt\",\n  \"private_key_id\": \"94d70c036c981b9987585f13d7b3c9652453ee52\",\n...\n  \"client_email\": \"learn-dbt@my-test-project-dbt.iam.gserviceaccount.com\",\n  \"client_id\": \"109294561269034045481\",\n  \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n  \"token_uri\": \"https://oauth2.googleapis.com/token\",\n  \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n  \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/learn-dbt%40my-test-project-dbt.iam.gserviceaccount.com\",\n  \"universe_domain\": \"googleapis.com\"\n}\n...\nPath: README.md\nWelcome to your new dbt project!\n\n### Using the starter project\n\nTry running the following commands:\n- dbt run\n- dbt test\n\n\n### Resources:\n- Learn more about dbt [in the docs](https://docs.getdbt.com/docs/introduction)\n- Check out [Discourse](https://discourse.getdbt.com/) for commonly asked questions and answers\n- Join the [chat](https://community.getdbt.com/) on Slack for live discussions and support\n- Find [dbt events](https://events.getdbt.com) near you\n- Check out [the blog](https://blog.getdbt.com/) for the latest news on dbt's development and best practices\n...\nPath: my-test-project-dbt-94d70c036c98.json\n{\n  \"type\": \"service_account\",\n  \"project_id\": \"my-test-project-dbt\",\n  \"private_key_id\": \"94d70c036c981b9987585f13d7b3c9652453ee52\",\n...\n  \"client_email\": \"learn-dbt@my-test-project-dbt.iam.gserviceaccount.com\",\n  \"client_id\": \"109294561269034045481\",\n  \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n  \"token_uri\": \"https://oauth2.googleapis.com/token\",\n  \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n  \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/learn-dbt%40my-test-project-dbt.iam.gserviceaccount.com\",\n  \"universe_domain\": \"googleapis.com\"\n}\n...\nPath: models/example/my_first_dbt_model.sql\n\n/*\n    Welcome to your first dbt model!\n    Did you know that you can also configure models directly within SQL files?\n    This will override configurations stated in dbt_project.yml\n\n    Try changing \"table\" to \"view\" below\n*/\n\n{{ config(materialized='table') }}\n\nwith source_data as (\n\n    select 1 as id\n    union all\n    select null as id\n\n)\n\nselect *\nfrom source_data\n\n/*\n    Uncomment the line below to remove records with null `id` values\n*/\n\n-- where id is not null\n...\nPath: models/example/schema.yml\n\nversion: 2\n\nmodels:\n  - name: my_first_dbt_model\n    description: \"A starter dbt model\"\n    columns:\n      - name: id\n        description: \"The primary key for this table\"\n        data_tests:\n          - unique\n          - not_null\n\n  - name: my_second_dbt_model\n    description: \"A starter dbt model\"\n    columns:\n      - name: id\n        description: \"The primary key for this table\"\n        data_tests:\n          - unique\n          - not_null\n...\nPath: models/example/my_second_dbt_model.sql\n\n-- Use the `ref` function to select from other models\n\nselect *\nfrom {{ ref('my_first_dbt_model') }}\nwhere id = 1\n...\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_012YM1wiTHTvHe9i9tpN2q5a"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"C:/Users/ADMIN/DataspellProjects/test_dbt","folderRoot":"C:/Users/ADMIN/DataspellProjects/test_dbt"}],"workspaceFoldersUnchanged":false}}],"timestamp":"2025-05-11T14:33:25.144Z","response_text":"I can see your dbt project is set up with the name 'test_dbt' and I've found a BigQuery service account JSON file. Now I'll create a profiles.yml template for BigQuery that you can use with your project.\n","workspace_file_chunks":[]},{"status":"success","request_id":"e2d9b43f-85c4-4ba5-b46f-35305f8ff5aa","request_message":"","structured_output_nodes":[{"id":0,"type":0,"content":"I've created a `profiles.yml` template for BigQuery that's compatible with your dbt project. Here's what you need to know about this file:\n\n### BigQuery Profile Template Details\n\n1. **Profile Name**: The profile name `test_dbt` matches what's specified in your `dbt_project.yml` file.\n\n2. **Environments**: The template includes both `dev` and `prod` environments.\n\n3. **Authentication**: \n   - The template is set up to use service account authentication\n   - I've included the path placeholder for your service account JSON file that I found in your project\n   - You'll need to update the path to the full absolute path where your JSON file is located\n\n4. **Configuration Options**:\n   - `project`: Set to your GCP project ID (pre-filled based on your service account)\n   - `dataset`: Separate datasets for dev and prod environments\n   - `location`: Set to \"US\" by default (change if your BigQuery instance is in a different region)\n   - `threads`: Number of concurrent operations (4 is a good default)\n   - `timeout_seconds`: Query timeout (300 seconds is standard)\n\n### Next Steps\n\n1. **Update the keyfile path**: Replace `/path/to/my-test-project-dbt-94d70c036c98.json` with the absolute path to your service account JSON file.\n\n2. **Place the file in the correct location**: \n   - For dbt Core: Place this file in `~/.dbt/` directory\n   - For dbt Cloud: Configure these settings in the dbt Cloud interface\n\n3. **Test your connection**: Run `dbt debug` to verify your connection works properly\n\nWould you like me to make any adjustments to this template or explain any part of it in more detail?\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"File saved successfully.","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01TXkP2EPZzshtzedRzbZ3BP"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"C:/Users/ADMIN/DataspellProjects/test_dbt","folderRoot":"C:/Users/ADMIN/DataspellProjects/test_dbt"}],"workspaceFoldersUnchanged":false}}],"timestamp":"2025-05-11T14:33:43.937Z","response_text":"I've created a `profiles.yml` template for BigQuery that's compatible with your dbt project. Here's what you need to know about this file:\n\n### BigQuery Profile Template Details\n\n1. **Profile Name**: The profile name `test_dbt` matches what's specified in your `dbt_project.yml` file.\n\n2. **Environments**: The template includes both `dev` and `prod` environments.\n\n3. **Authentication**: \n   - The template is set up to use service account authentication\n   - I've included the path placeholder for your service account JSON file that I found in your project\n   - You'll need to update the path to the full absolute path where your JSON file is located\n\n4. **Configuration Options**:\n   - `project`: Set to your GCP project ID (pre-filled based on your service account)\n   - `dataset`: Separate datasets for dev and prod environments\n   - `location`: Set to \"US\" by default (change if your BigQuery instance is in a different region)\n   - `threads`: Number of concurrent operations (4 is a good default)\n   - `timeout_seconds`: Query timeout (300 seconds is standard)\n\n### Next Steps\n\n1. **Update the keyfile path**: Replace `/path/to/my-test-project-dbt-94d70c036c98.json` with the absolute path to your service account JSON file.\n\n2. **Place the file in the correct location**: \n   - For dbt Core: Place this file in `~/.dbt/` directory\n   - For dbt Cloud: Configure these settings in the dbt Cloud interface\n\n3. **Test your connection**: Run `dbt debug` to verify your connection works properly\n\nWould you like me to make any adjustments to this template or explain any part of it in more detail?\n","workspace_file_chunks":[]},{"request_id":"837da5ba-7c2b-4aea-ad36-e2e8b1d72ee5","status":"cancelled","chatItemType":"agentic-turn-delimiter"},{"status":"success","request_id":"dec52445-bc00-4a98-af0a-57ce012163da","request_message":"C:\\Users\\ADMIN\\DataspellProjects\\test_dbt\\venv\\Scripts\\dbt.exe list\r\n14:42:39  Running with dbt=1.9.4\r\n14:42:39  Error importing adapter: No module named 'dbt.adapters.bigquery'\r\n14:42:39  Encountered an error:\r\nRuntime Error\r\n  Credentials in profile \"test_dbt\", target \"dev\" invalid: Runtime Error\r\n    Could not find adapter type bigquery!\r\n\r\nProcess finished with exit code 2\r\n","rich_text_json_repr":{"type":"doc","content":[{"type":"paragraph","content":[{"type":"text","text":"C:\\Users\\ADMIN\\DataspellProjects\\test_dbt\\venv\\Scripts\\dbt.exe list\r"},{"type":"hardBreak"},{"type":"text","text":"14:42:39  Running with dbt=1.9.4\r"},{"type":"hardBreak"},{"type":"text","text":"14:42:39  Error importing adapter: No module named 'dbt.adapters.bigquery'\r"},{"type":"hardBreak"},{"type":"text","text":"14:42:39  Encountered an error:\r"},{"type":"hardBreak"},{"type":"text","text":"Runtime Error\r"},{"type":"hardBreak"},{"type":"text","text":"  Credentials in profile \"test_dbt\", target \"dev\" invalid: Runtime Error\r"},{"type":"hardBreak"},{"type":"text","text":"    Could not find adapter type bigquery!\r"},{"type":"hardBreak"},{"type":"text","text":"\r"},{"type":"hardBreak"},{"type":"text","text":"Process finished with exit code 2\r"},{"type":"hardBreak"}]}]},"mentioned_items":[],"structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_018Jve5YxCoqRVjRSNdpZ6nn","tool_name":"launch-process","input_json":"{\"command\": \"C:\\\\Users\\\\ADMIN\\\\DataspellProjects\\\\test_dbt\\\\venv\\\\Scripts\\\\pip.exe list\", \"wait\": true, \"max_wait_seconds\": 60}","mcp_server_name":"","mcp_tool_name":""}},{"id":0,"type":0,"content":"I see the error message. You're missing the BigQuery adapter for dbt. Let's install it and fix this issue.\n\n## Information Gathering\n\nLet me first check your current environment setup:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":0,"text_node":{"content":"C:\\Users\\ADMIN\\DataspellProjects\\test_dbt\\venv\\Scripts\\dbt.exe list\r\n14:42:39  Running with dbt=1.9.4\r\n14:42:39  Error importing adapter: No module named 'dbt.adapters.bigquery'\r\n14:42:39  Encountered an error:\r\nRuntime Error\r\n  Credentials in profile \"test_dbt\", target \"dev\" invalid: Runtime Error\r\n    Could not find adapter type bigquery!\r\n\r\nProcess finished with exit code 2\r\n"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"C:/Users/ADMIN/DataspellProjects/test_dbt","folderRoot":"C:/Users/ADMIN/DataspellProjects/test_dbt"}],"workspaceFoldersUnchanged":false}}],"timestamp":"2025-05-11T14:44:18.068Z","response_text":"I see the error message. You're missing the BigQuery adapter for dbt. Let's install it and fix this issue.\n\n## Information Gathering\n\nLet me first check your current environment setup:\n","workspace_file_chunks":[]},{"status":"success","request_id":"ca3b1115-c4bb-4ea8-9532-d9eaf63d92ac","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01V1WHvpaaFXrcZUNBYCMhpk","tool_name":"launch-process","input_json":"{\"command\": \"pip list\", \"wait\": true, \"max_wait_seconds\": 60}","mcp_server_name":"","mcp_tool_name":""}},{"id":0,"type":0,"content":"Let me try again to check your installed packages and then install the BigQuery adapter for dbt.\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Command is still running after 60 seconds. You can use read-process to get more output\n          and kill-process to terminate it if needed.\n          PID 7\n          Output so far:\n          <stdout>\n          \u001b[?9001h\u001b[?1004h\u001b[?25l\u001b[2J\u001b[m\u001b[HMicrosoft Windows [Version 10.0.22631.5189]\n(c) Microsoft Corporation. All rights reserved.\u001b[4;1HC:\\Users\\ADMIN\\DataspellProjects\\test_dbt>\u001b]0;C:\\Windows\\system32\\cmd.exe\u0007\u001b[?25h\u001b[?25l\u001b[8;8;180t\u001b[HMicrosoft Windows [Version 10.0.22631.5189]\u001b[K\n(c) Microsoft Corporation. All rights reserved.\u001b[K\n\u001b[K\nC:\\Users\\ADMIN\\DataspellProjects\\test_dbt>\u001b[K\n\u001b[K\n\u001b[K\n\u001b[K\n\u001b[K\u001b[4;43H\u001b[?25h\n          </stdout>\n          <stderr>\n          \n          </stderr>","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_018Jve5YxCoqRVjRSNdpZ6nn"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"C:/Users/ADMIN/DataspellProjects/test_dbt","folderRoot":"C:/Users/ADMIN/DataspellProjects/test_dbt"}],"workspaceFoldersUnchanged":false,"currentTerminal":{"terminalId":7,"currentWorkingDirectory":"C:/Users/ADMIN/DataspellProjects/test_dbt"}}}],"timestamp":"2025-05-11T14:45:27.666Z","response_text":"Let me try again to check your installed packages and then install the BigQuery adapter for dbt.\n","workspace_file_chunks":[]},{"request_id":"1d3f4942-6c6d-4313-9bfe-a2234e83bc7f","status":"cancelled","chatItemType":"agentic-turn-delimiter"}],"feedbackStates":{"temp-fe-9b89aab4-02e2-4eb0-b8cd-4588ea1a6805":{"selectedRating":0,"feedbackNote":""},"temp-fe-7812a94a-befb-4987-8c2f-134945176285":{"selectedRating":0,"feedbackNote":""},"temp-fe-680bd766-e935-44ff-83bc-64b9841f9b67":{"selectedRating":0,"feedbackNote":""},"temp-fe-99f25e07-6cc9-4c4a-8aea-8ad4df18760a":{"selectedRating":0,"feedbackNote":""},"temp-fe-30bf617c-22cf-45c8-b379-085b899e117d":{"selectedRating":0,"feedbackNote":""},"temp-fe-7b405988-2ffe-4da6-ad2d-38284f1f4b13":{"selectedRating":0,"feedbackNote":""},"temp-fe-a45bf1f8-ead6-43cd-9c31-ebaf3c91636f":{"selectedRating":0,"feedbackNote":""},"temp-fe-67787426-758c-4124-86da-18132402335a":{"selectedRating":0,"feedbackNote":""}},"toolUseStates":{"0d0a5538-bcfe-49ce-b374-710ed8686457;toolu_vrtx_012YM1wiTHTvHe9i9tpN2q5a":{"requestId":"0d0a5538-bcfe-49ce-b374-710ed8686457","toolUseId":"toolu_vrtx_012YM1wiTHTvHe9i9tpN2q5a","phase":5,"result":{"text":"The following code sections were retrieved:\nPath: dbt_project.yml\n\n# Name your project! Project names should contain only lowercase characters\n# and underscores. A good package name should reflect your organization's\n# name or the intended use of these models\nname: 'test_dbt'\nversion: '1.0.0'\n\n# This setting configures which \"profile\" dbt uses for this project.\nprofile: 'test_dbt'\n\n# These configurations specify where dbt should look for different types of files.\n# The `model-paths` config, for example, states that models in this project can be\n# found in the \"models/\" directory. You probably won't need to change these!\nmodel-paths: [\"models\"]\nanalysis-paths: [\"analyses\"]\ntest-paths: [\"tests\"]\nseed-paths: [\"seeds\"]\nmacro-paths: [\"macros\"]\nsnapshot-paths: [\"snapshots\"]\n\nclean-targets:         # directories to be removed by `dbt clean`\n  - \"target\"\n  - \"dbt_packages\"\n\n\n# Configuring models\n# Full documentation: https://docs.getdbt.com/docs/configuring-models\n\n# In this example config, we tell dbt to build all models in the example/\n# directory as views. These settings can be overridden in the individual model\n# files using the `{{ config(...) }}` macro.\nmodels:\n  test_dbt:\n    # Config indicated by + and applies to all files under models/example/\n    example:\n      +materialized: view\n...\nPath: analyses/my-test-project-dbt-94d70c036c98.json\n{\n  \"type\": \"service_account\",\n  \"project_id\": \"my-test-project-dbt\",\n  \"private_key_id\": \"94d70c036c981b9987585f13d7b3c9652453ee52\",\n...\n  \"client_email\": \"learn-dbt@my-test-project-dbt.iam.gserviceaccount.com\",\n  \"client_id\": \"109294561269034045481\",\n  \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n  \"token_uri\": \"https://oauth2.googleapis.com/token\",\n  \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n  \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/learn-dbt%40my-test-project-dbt.iam.gserviceaccount.com\",\n  \"universe_domain\": \"googleapis.com\"\n}\n...\nPath: README.md\nWelcome to your new dbt project!\n\n### Using the starter project\n\nTry running the following commands:\n- dbt run\n- dbt test\n\n\n### Resources:\n- Learn more about dbt [in the docs](https://docs.getdbt.com/docs/introduction)\n- Check out [Discourse](https://discourse.getdbt.com/) for commonly asked questions and answers\n- Join the [chat](https://community.getdbt.com/) on Slack for live discussions and support\n- Find [dbt events](https://events.getdbt.com) near you\n- Check out [the blog](https://blog.getdbt.com/) for the latest news on dbt's development and best practices\n...\nPath: my-test-project-dbt-94d70c036c98.json\n{\n  \"type\": \"service_account\",\n  \"project_id\": \"my-test-project-dbt\",\n  \"private_key_id\": \"94d70c036c981b9987585f13d7b3c9652453ee52\",\n...\n  \"client_email\": \"learn-dbt@my-test-project-dbt.iam.gserviceaccount.com\",\n  \"client_id\": \"109294561269034045481\",\n  \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n  \"token_uri\": \"https://oauth2.googleapis.com/token\",\n  \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n  \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/learn-dbt%40my-test-project-dbt.iam.gserviceaccount.com\",\n  \"universe_domain\": \"googleapis.com\"\n}\n...\nPath: models/example/my_first_dbt_model.sql\n\n/*\n    Welcome to your first dbt model!\n    Did you know that you can also configure models directly within SQL files?\n    This will override configurations stated in dbt_project.yml\n\n    Try changing \"table\" to \"view\" below\n*/\n\n{{ config(materialized='table') }}\n\nwith source_data as (\n\n    select 1 as id\n    union all\n    select null as id\n\n)\n\nselect *\nfrom source_data\n\n/*\n    Uncomment the line below to remove records with null `id` values\n*/\n\n-- where id is not null\n...\nPath: models/example/schema.yml\n\nversion: 2\n\nmodels:\n  - name: my_first_dbt_model\n    description: \"A starter dbt model\"\n    columns:\n      - name: id\n        description: \"The primary key for this table\"\n        data_tests:\n          - unique\n          - not_null\n\n  - name: my_second_dbt_model\n    description: \"A starter dbt model\"\n    columns:\n      - name: id\n        description: \"The primary key for this table\"\n        data_tests:\n          - unique\n          - not_null\n...\nPath: models/example/my_second_dbt_model.sql\n\n-- Use the `ref` function to select from other models\n\nselect *\nfrom {{ ref('my_first_dbt_model') }}\nwhere id = 1\n...\n","isError":false,"requestId":""}},"02d0c964-90b5-4b90-8908-2cee8f439898;toolu_vrtx_01TXkP2EPZzshtzedRzbZ3BP":{"requestId":"02d0c964-90b5-4b90-8908-2cee8f439898","toolUseId":"toolu_vrtx_01TXkP2EPZzshtzedRzbZ3BP","phase":5,"result":{"text":"File saved successfully.","isError":false,"requestId":""}},"527459ed-0338-482f-acf1-e27dc1d7e93e;toolu_vrtx_015cMzHvZi6jyrvckiyxNMaW":{"requestId":"527459ed-0338-482f-acf1-e27dc1d7e93e","toolUseId":"toolu_vrtx_015cMzHvZi6jyrvckiyxNMaW","phase":6,"result":{"text":"Cannot run program \"powershell.exe\" (in directory \"C:\\Users\\ADMIN\\DataspellProjects\\test_dbt\"): CreateProcess error=2, The system cannot find the file specified","isError":true,"requestId":""}},"d78c8bb0-915c-409f-b168-d3173aa1d37c;toolu_vrtx_01H5SJdJJboSnwzZMvo38EEv":{"requestId":"d78c8bb0-915c-409f-b168-d3173aa1d37c","toolUseId":"toolu_vrtx_01H5SJdJJboSnwzZMvo38EEv","phase":6,"result":{"text":"Cannot run program \"powershell.exe\" (in directory \"C:\\Users\\ADMIN\\DataspellProjects\\test_dbt\"): CreateProcess error=2, The system cannot find the file specified","isError":true,"requestId":""}},"dec52445-bc00-4a98-af0a-57ce012163da;toolu_vrtx_018Jve5YxCoqRVjRSNdpZ6nn":{"requestId":"dec52445-bc00-4a98-af0a-57ce012163da","toolUseId":"toolu_vrtx_018Jve5YxCoqRVjRSNdpZ6nn","phase":5,"result":{"text":"Command is still running after 60 seconds. You can use read-process to get more output\n          and kill-process to terminate it if needed.\n          PID 7\n          Output so far:\n          <stdout>\n          \u001b[?9001h\u001b[?1004h\u001b[?25l\u001b[2J\u001b[m\u001b[HMicrosoft Windows [Version 10.0.22631.5189]\n(c) Microsoft Corporation. All rights reserved.\u001b[4;1HC:\\Users\\ADMIN\\DataspellProjects\\test_dbt>\u001b]0;C:\\Windows\\system32\\cmd.exe\u0007\u001b[?25h\u001b[?25l\u001b[8;8;180t\u001b[HMicrosoft Windows [Version 10.0.22631.5189]\u001b[K\n(c) Microsoft Corporation. All rights reserved.\u001b[K\n\u001b[K\nC:\\Users\\ADMIN\\DataspellProjects\\test_dbt>\u001b[K\n\u001b[K\n\u001b[K\n\u001b[K\n\u001b[K\u001b[4;43H\u001b[?25h\n          </stdout>\n          <stderr>\n          \n          </stderr>","isError":false,"requestId":""}},"ca3b1115-c4bb-4ea8-9532-d9eaf63d92ac;toolu_vrtx_01V1WHvpaaFXrcZUNBYCMhpk":{"requestId":"ca3b1115-c4bb-4ea8-9532-d9eaf63d92ac","toolUseId":"toolu_vrtx_01V1WHvpaaFXrcZUNBYCMhpk","phase":8,"result":{"text":"Here are the results from executing the command.\n        <return-code>\n        1\n        </return-code>\n        <stdout>\n        \u001b[?9001h\u001b[?1004h\u001b[?25l\u001b[2J\u001b[m\u001b[HMicrosoft Windows [Version 10.0.22631.5189]\n(c) Microsoft Corporation. All rights reserved.\u001b[4;1HC:\\Users\\ADMIN\\DataspellProjects\\test_dbt>\u001b]0;C:\\Windows\\system32\\cmd.exe\u0007\u001b[?25h\u001b[?25l\u001b[8;8;180t\u001b[HMicrosoft Windows [Version 10.0.22631.5189]\u001b[K\n(c) Microsoft Corporation. All rights reserved.\u001b[K\n\u001b[K\nC:\\Users\\ADMIN\\DataspellProjects\\test_dbt>\u001b[K\n\u001b[K\n\u001b[K\n\u001b[K\n\u001b[K\u001b[4;43H\u001b[?25h\u001b[?25l\u001b[6;1HC:\\Users\\ADMIN\\DataspellProjects\\test_dbt>\u001b[?25h\n        </stdout>\n        <stderr>\n        \n        </stderr>","isError":false,"requestId":""}}},"draftExchange":{"request_message":"","rich_text_json_repr":{"type":"doc","content":[{"type":"paragraph"}]},"status":"draft"},"requestIds":[],"isPinned":false,"isShareable":true,"extraData":{"isAgentConversation":true,"hasAgentOnboarded":true,"hasDirtyEdits":false},"personaType":0}},"agentExecutionMode":"manual","isAgentEditsCollapsed":true}" />
      </map>
    </option>
  </component>
</project>